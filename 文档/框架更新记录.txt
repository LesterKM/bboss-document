************************************************bbossgroups-3.3******************************
1.aop/ioc
------2011-07-16-----------
o 增加netty协议消息大小配置参数，解决爆炒过默认1M时发送失败的问题
<!-- 能够解码的最大数据size，超过时，将抛异常，默认20M -->
			<property name="maxFramgeLength_" value="20971520" />
			
			<!-- 编码块大小 -->
			<property name="estimatedLength_" value="1024" />
------2011-07-04-----------
o 修改默认服务发布时，serviceport带了ws:前缀
------2011-07-02-----------
o 修复注入属性缺陷：
当属性值注入以后没有立即退出注入循环，而是把循环跑完，对性能有一定的影响。
修改程序：
/bbossaop/src/org/frameworkset/spi/assemble/BeanAccembleHelper.java
o 修复配置文件sql不能安照特定数据库类型或者到指定数据库sql语句的缺陷

2.mvc
------2011-07-24-------------
o 控制器方法参数绑定机制增加MultipartFile、MultipartFile[]类型绑定支持,必须和RequestParam注解一起使用，使用方法如下：
public String uploadFileWithMultipartFile(@RequestParam(name="upload1")  MultipartFile file,
			ModelMap model)
public String uploadFileWithMultipartFiles(@RequestParam(name="upload1")  MultipartFile[] files,
			ModelMap model)
o PO对象属性数据绑定机制增加MultipartFile、MultipartFile[]类型绑定支持,可以和RequestParam注解一起使用，也可以直接与属性名称直接绑定，使用方法如下：
public String uploadFileWithFileBean(FileBean files)

FileBean是一个自定义的java bean，结构如下：
public class FileBean
{
	private MultipartFile upload1;
	@RequestParam(name="upload1")
	private MultipartFile[] uploads;
	@RequestParam(name="upload1")
	private MultipartFile anupload;
	//省略属性的get/set方法
}	
o 完善@ResponseBody注解，增加直接对文件下载功能的支持，只要控制器方法返回File对象即可
o 完善认证拦截器功能，增加认证失败后跳转页面的方式为redirect和forward两种，可以在拦截器上配置directtype属性
 来实现具体的跳转方式：
 <property class="org.frameworkset.web.interceptor.MyFirstInterceptor">
     			<!-- 配置认证检查拦截器拦截url模式规则 -->
     			<property name="patternsInclude">
     				<list componentType="string">
     					<property value="/**/*.htm"/>
     				</list>
     			</property>
     			<!-- 配置认证检查拦截器不拦截url模式规则 -->
     			<property name="patternsExclude">
     				<list componentType="string">
     					<property value="/*.html"/>
     				</list>
     			</property>
     			<property name="redirecturl" value="/login.jsp"/>
     			<property name="directtype" value="forward"/>
     		</property>
o 修复mvc分页跳转页码为负数时，不能正常分页的问题
o 修复ResponseBody指定数据返回类型和字符集不生效的问题

3.persistent
------2011-08-05-------------
o 处理日期和时间类型时转换为字符串时，如果值为空时抛出空指针异常的问题修复
------2011-07-25-------------
o 解决sql server元数据获取为空的问题
------2011-07-24-------------
o 改进SQLParams api，可以直接对MultipartFile对象存入clob或者blob列。
sqlparams.addSQLParam("FILECONTENT", multipartfile,SQLParams.BLOBFILE);

对于大字段的处理建议采用以下方法：
sqlparams.addSQLParam("FILECONTENT", multipartfile,SQLParams.BLOBFILE);//直接传递MultipartFile对象进行插入
sqlparams.addSQLParam("FILECONTENT", inputStream, size,SQLParams.BLOBFILE);//直接传递InputStream对象以及流大小Size属性进行插入
------2011-07-15-------------
o 增加FieldRowHandler处理器，以便实现从blob/clob中获取单个字段文件对象的处理,其他类似类型数据也可以使用FieldRowHandler，使用示例如下：
public File getDownloadClobFile(String fileid) throws Exception
	{
		try
		{
			return SQLExecutor.queryTField(
											File.class,
											new FieldRowHandler<File>() {

												@Override
												public File handleField(
														Record record)
														throws Exception
												{

													// 定义文件对象
													File f = new File("d:/",record.getString("filename"));
													// 如果文件已经存在则直接返回f
													if (f.exists())
														return f;
													// 将blob中的文件内容存储到文件中
													record.getFile("filecontent",f);
													return f;
												}
											},
											"select * from CLOBFILE where fileid=?",
											fileid);
		}
		catch (Exception e)
		{
			throw e;
		}
	}
------2011-07-15------------
o 增加对文件上传入库和从db下载功能的支持,使用实例
上传
public boolean uploadFile(InputStream inputStream,long size, String filename) throws Exception {
		boolean result = true;
		String sql = "";
		try {
			sql = "INSERT INTO filetable (FILENAME,FILECONTENT,fileid,FILESIZE) VALUES(#[filename],#[FILECONTENT],#[FILEID],#[FILESIZE])";
			SQLParams sqlparams = new SQLParams();
			sqlparams.addSQLParam("filename", filename, SQLParams.STRING);
			sqlparams.addSQLParam("FILECONTENT", inputStream, size,SQLParams.BLOBFILE);
			sqlparams.addSQLParam("FILEID", UUID.randomUUID().toString(),SQLParams.STRING);
			sqlparams.addSQLParam("FILESIZE", size,SQLParams.LONG);
			SQLExecutor.insertBean(sql, sqlparams);			
			
		} catch (Exception ex) {
			ex.printStackTrace();
			result = false;
			throw new Exception("上传附件关联临控指令布控信息附件失败：" + ex);
		} finally {
			if(inputStream != null){
				inputStream.close();
			}
		}
		return result;
	}
下载	
	SQLExecutor.queryByNullRowHandler(new NullRowHandler(){
				@Override
				public void handleRow(Record record)
						throws Exception
				{
					record.getBlob("filecontent").getBinaryStream();
					StringUtil.sendFile(request, response, record.getString("filename"),record.getBlob("filecontent"));
				}}, "select * from filetable where fileid=?",fileid);
o 如果没有指定一条sql语句，PreparedDBUtil.executePreparedBatch将报出异常，这个不是很合理
直接改为info方式。

4.taglib
------2011-07-31------------
o 增加map和mapkey两个标签，用来循环迭代展示map中的value对象值或者value对象中的数据值以及mapkey值
使用方法如下：
<table>
	    <h3>map<String,po>对象信息迭代功能</h3>
		<pg:map requestKey="mapbeans">
		
			<tr class="cms_data_tr">
				<td>
					mapkey:<pg:mapkey/>
				</td> 
				<td>
					id:<pg:cell colName="id" />
				</td> 
				<td>
					name:<pg:cell colName="name" />
				</td> 
			</tr>
		</pg:map>
		
		
	</table>
	
	<table>
	    <h3>map<String,String>字符串信息迭代功能</h3>
		<pg:map requestKey="mapstrings">
		
			<tr class="cms_data_tr">
				<td>
					mapkey:<pg:mapkey/>
				</td> 
				<td>
					value:<pg:cell/>
				</td> 
				
			</tr>
		</pg:map>
		
		
	</table>
------2011-07-19------------
o cell标签提供actual属性，可以直接输出改属性设定的值，值可以为el表达式的值
------2011-07-13------------
o 修改empty和notempty两个逻辑标签增加对Collection和Map对象的为empty判断支持
o 修改rowcount标签，去除多余的空格
o 完善标签排序功能补丁
增加相应的指示箭头，标识升序和降序
相关文件
/bboss-mvc/WebRoot/include/pager.css
WebRoot\WEB-INF\lib\frameworkset.jar
具体的使用方法参考《基于基础框架开发约定.doc》中的章节3.5	分页字段排序设定
5.util
------2011-07-19------------
o StringUtil类中增加文件下载方法：
StringUtil.sendFile(request, response, record
							.getString("filename"), record
							.getBlob("filecontent"));
StringUtil.sendFile(request, response, file);							
------2011-06-14------------
o 支持数字向BigDecimal转换、数字数组向BigDecimal数组转换功能


************************************************bbossgroups-3.2******************************
------2011-06-10------------
o 修正SQLExecutor中泛型字段查询API中的类型转换漏洞
------2011-06-09------------
o 处理空字符串向日期类型转换后台报异常的缺陷
------2011-06-09------------
o 注解控制器可以不用添加注解@Controller也可以被框架识别了
------2011-06-8------------
o 修正不正常的提示信息，externaljndiName
o 修复只配置外部数据源的情况下，pool启动堆栈溢出问题
    java.lang.StackOverflowError
	at java.lang.Thread.currentThread(Native Method)
	at org.apache.xerces.util.SecuritySupport12$1.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.xerces.util.SecuritySupport12.getContextClassLoader(Unknown Source)
	at org.apache.xerces.util.ObjectFactory.findClassLoader(Unknown Source)
	at org.apache.xerces.impl.dv.DTDDVFactory.getInstance(Unknown Source)
	at org.apache.xerces.impl.dv.DTDDVFactory.getInstance(Unknown Source)
	at 
	修改程序清单：
	com.frameworkset.common.poolman.sql.PoolMan
	com.frameworkset.common.poolman.util.JDBCPool
	com.frameworkset.common.poolman.util.SQLManager
	com.frameworkset.common.poolman.util.SQLUtil
	 	public static JDBCPool getJDBCPoolByJNDIName(String jndiname)
        {
            JDBCPool pool = SQLUtil.getSQLManager().getPoolByJNDIName(jndiname,true);
            return pool;
        }
        
        public static JDBCPool getJDBCPoolByJNDIName(String jndiname,boolean needcheckStart)
        {
            JDBCPool pool = SQLUtil.getSQLManager().getPoolByJNDIName(jndiname,needcheckStart);
            return pool;
        }

------2011-06-06------------
o 完善responsebody注解功能,增加datatype和charset两个属性
datatype：json,xml等值，用来指出输出数据的content类型
charset：用来指出reponse响应字符编码
详细使用方法请参考测试用例
org.frameworkset.web.enumtest.EnumConvertController
org.frameworkset.web.http.converter.json.JsonController
------2011-06-04------------
o 逻辑标签可以独立于list和beaninfo标签使用,增加以下属性：
		<attribute>
			<name>requestKey</name>
			<rtexprvalue>true</rtexprvalue>
		</attribute>
		<attribute>
			<name>sessionKey</name>
			<rtexprvalue>true</rtexprvalue>
		</attribute>
		<attribute>
			<name>pageContextKey</name>
			<rtexprvalue>true</rtexprvalue>
		</attribute>
		<attribute>
			<name>parameter</name>
			<rtexprvalue>true</rtexprvalue>
		</attribute>
		<attribute>
			<name>actual</name>
			<rtexprvalue>true</rtexprvalue>
		</attribute>
通过以上属性，可以方便地制定逻辑标签的期望值，
requestKey：指定从request的attribute属性中获取实际值，
sessionKey：指定从session的attribute属性中获取实际值，
pageContextKey：指定从pageContext的attribute属性中获取实际值，
parameter:指定从request的parameter中获取实际值
actual:直接指定实际值，可以是具体的值，也可以是一个el变量
上述属性还可以和property属性结合起来获取值对象中的属性值
------2011-06-04------------
o request和session标签增加日期dateformat格式属性

------2011-06-03------------
o 修复config标签enablecontextmenu属性不能正常工作的漏洞
------2011-06-2------------
o 修复使用Column注解设置对象属性与列名映射时，导致sql语句中绑定相应的属性变量值失败的漏洞

------2011-05-28-----------
o 修复quartz引擎加载带参数方法任务时，后台抛空指针异常，这是3.1版本产生的新问题，影响新
 版本的使用
o 完善任务调度管理组件org.frameworkset.task.TaskService
完善stopService方法和startService方法，解决停止引擎后，无法启动引擎的问题，增加方法stopService(boolean force)
增加方法，一边在执行public void deleteJob(String jobname, String groupid)方法后重新加载作业
public void startExecuteJob(String groupid, String jobname)
------2011-05-28------------
o 支持Map<Key,PO>类型参数绑定机制，通过这种机制可以非常方便地将表单提交过来的一个对象集合数据
根据key对应的字段值，形成Map索引对象。
使用方法如下：
public String mapbean(@MapKey("fieldName") Map<String,ListBean> beans, ModelMap model) {
		String sql = "INSERT INTO LISTBEAN (" + "ID," + "FIELDNAME,"
				+ "FIELDLABLE," + "FIELDTYPE," + "SORTORDER,"
				+ " ISPRIMARYKEY," + "REQUIRED," + "FIELDLENGTH,"
				+ "ISVALIDATED" + ")" + "VALUES"
				+ "(#[id],#[fieldName],#[fieldLable],#[fieldType],#[sortorder]"
				+ ",#[isprimaryKey],#[required],#[fieldLength],#[isvalidated])";
		TransactionManager tm = new TransactionManager();
		try {
			if(beans != null)
			{
				List temp =  convertMaptoList( beans);
				
				tm.begin();
				SQLExecutor.delete("delete from LISTBEAN");
				SQLExecutor.insertBeans(sql, temp);
				tm.commit();
				model.addAttribute("datas", temp);
			}
		} catch (Exception e) {
			try {
				tm.rollback();
			} catch (RollbackException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return "path:mapbean";
	}
	详情请参考测试用例：
	/bboss-mvc/WebRoot/WEB-INF/bboss-mapbean.xml
------2011-05-26------------
o 新增empty和notempty两个逻辑标签使用方法和null、notnull一样
empty判断指定的字段的值是否是null，或者空串，如果条件成立，则执行标签体中的逻辑
notempty判断指定的字段的值既不是null也不是空串，则执行标签体得内容
------2011-05-24------------
o 修改null和notnull标签不能正确工作的问题
o 修复detail标签的提示信息不是很正确的问题
###################################################################################
------2011-05-20------------
o 修复引用容器datasource漏洞
o 修复通过模板启动数据源参数设置问题
o 修复一系列空指针问题
o 修复使用外部数据源时，当外部数据源是oracle时无法获取数据源的元数据问题,必须制定相应数据库的驱动程序，否则无法初始化正确的dbadapter
------2011-05-20-----------
o 增加rmi服务发布和rmi客服端组件获取功能
发布服务方法，通过 rmi:address指定发布服务的唯一地址：
<property name="rmi_service_test"
		 rmi:address="rmi_service_test"
		 class="org.frameworkset.spi.remote.rmi.RMIServiceTest"/>
服务器port的指定在rmi协议配置文件中：
/bbossaop/resources/org/frameworkset/spi/manager-rpc-rmi.xml
	<!-- 
					服务器绑定端口
				 -->
	<property name="connection.bind.port" value="1099" />
	
rmi客服端组件配置和获取：
配置
<property name="rmi_service_client_test" factory-class="org.frameworkset.spi.remote.rmi.RMIUtil" factory-method="lookupService">
		<construction>
			<property name="servicaddress" value="//172.16.25.108:1099/rmi_service_test"/>			
		</construction>
	</property>	

获取：
	BaseApplicationContext context ;
	@Before
	public void init()
	{
		context = ApplicationContext.getApplicationContext("org/frameworkset/spi/remote/rmi/rmi-client.xml");
	}
	@Test 
	public void test() throws RemoteException
	{
		RMIServiceTestInf test = (RMIServiceTestInf)context.getBeanObject("rmi_service_client_test");
		System.out.println(test.sayHello("多多"));
	}
------2011-05-17------------
o 修复sqlexecutor对日期类型timestamp处理丢失时分秒的缺陷


		
------2011-05-15-----------
o 改进国际化机制，每个组件容器相关的国际化文件必须和组件容器的根配置文件在同级目录，并且名称以下格式命名：
messages_en_US.properties
messages_zh_CN.properties
o 改进sql配置文件刷新机制，将3.1版本中每个sql配置文件定义一个守护进程改为单一守护进程检测机制，即所有的sql文件是否
变更的检测由一个守护进程完成，这个进程中维护一个文件队列，刷新事件配置也由manager-provider.xml文件改为：
/bbossaop/src/aop.properties中配置：
sqlfile.refresh_interval=5000
同时将sql配置文件的管理容器改为SOAFileApplicationContext，以便提升系统性能


------2011-05-11-----------
o 改进ApplicationContext，WebApplicationContext容器，分离出SOAApplicationContext、BaseApplicationContext和DefaultApplicationContext三个类型的容器，他们的职责分别为：
ApplicationContext：和原来的功能ApplicationContext的功能一致，包括基本的aop/ioc功能，远程服务，全局属性管理，拦截器，包含声明式事务管理，是BaseApplicationContext的子类
SOAApplicationContext/SOAFileApplicationContext：两个轻量级的ioc容器，包含全局属性管理，不包含远程服务，拦截器，不包含声明式事务管理，是DefaultApplicationContext的子类
DefaultApplicationContext：和ApplicationContext的区别就是不包含远程服务的功能，和远程服务相关的组件没有依赖关系，是BaseApplicationContext的子类
BaseApplicationContext：是一个抽象容器，所有的上层容器都间接或直接实现了这个容器，提供公共的基础功能。
WebApplicationContext：是mvc框架的控制器和业务组件管理容器，是DefaultApplicationContext的子类，拥有DefaultApplicationContext的所有功能。

------2011-05-11------------
o 完善restful实现机制，可以支持对控制器方法级别的restful全地址映射关系并修复了部分缺陷，3.0版本需要根据类级别和方法级别地址组合才能实现
  restful风格的功能，而且存在缺陷。
o aop框架中实现对象与xml相互转化功能

------2011-05-06------------
o 修复循环依赖机制漏洞
o 修复quartz任务调度导致模块中没有配置任何任务时，后台抛出类型转换异常
o 修复3.0版本中没有将组件实例机制定义为单例模式的漏洞，但是ppt培训教程中却明确指出该版本中的组件默认为单例模式

上述3个漏洞修复的程序为：
/bbossaop/src/org/frameworkset/spi/assemble/BeanAccembleHelper.java
/bbossaop/src/org/frameworkset/spi/assemble/Pro.java
/bbossaop/src/org/frameworkset/spi/assemble/ProviderParser.java
------2011-05-06------------
o 修复分页标签偶尔找不到vm模板文件的漏洞
上述漏洞修复的程序为：
/bboss-util/src/com/frameworkset/util/VelocityUtil.java
------2011-05-03------------
o 修复在事务环境下通过JDBCPool的方法
public TableMetaData getTableMetaDataFromDatabase(Connection con,
			String tableName)
获取不到特定数据源的表元数据的问题
------2011-05-03------------
o 修复preDBUtil.preparedSelect(params, dbName, sql, offset, long)
	在查询没有数据的情况下，preDBUtil.getMeta()返回的是null；	
	
************************************************bbossgroups-3.1******************************
------2011-04-30------------
o mvc框架绑定参数注解指定日期转换格式，以便保证按原始数据格式将参数转换为正确的日期
o mvc框架可以将日期类型(java.util.Date/java.sql.Date/java.sql.Timestamp)转换为long类型数据，也可以将long数据转换为日期类型(java.util.Date/java.sql.Date/java.sql.Timestamp)，
也可以进行long数组和日期类型(java.util.Date/java.sql.Date/java.sql.Timestamp)数组的相互转换
o 修复mvc框架控制器组件解析异常：
	java.lang.IllegalArgumentException: Class must not be null
	at org.frameworkset.util.Assert.notNull(Assert.java:112)
	at org.frameworkset.util.annotations.AnnotationUtils.findAnnotation(AnnotationUtils.java:129)
	at org.frameworkset.web.servlet.handler.HandlerUtils.determineUrlsForHandler(HandlerUtils.java:1965)
------2011-04-25------------
o 持久层框架中修复获取数字类型的值时，一旦rs中返回null时，没有正确获取数字缺省值的问题
ValueExchange.convert方法

o 标签库中修改字符串过滤器，解决jquery或者ajax数据请求时，分页查询的中文乱码问题，改进字符串过滤器的性能

------2011-04-24------------
o 改进webservice服务装载功能，可以从mvc和所有的applicationcontext中配置和装载webservice服务：
Mvc框架的ws服务无需特殊处理
普通的applicationcontext容器中的ws服务对应的模块配置文件需要配置在org/frameworkset/spi/ws/webserivce-modules.xml文件中

------2011-04-21------------
o 增加组件异步调用机制，使用方法参考测试用例：
/bbossaop/test/org/frameworkset/spi/asyn/AsynbeanTest.java
可以通过Async注解标注组件中需要异步执行的方法即可，可以指定超时时间，是否需要返回结果，是否需要回调处理返回结果

------2011-04-20------------
o 完善Pro对象对ProList，ProSet，ProMap，ProArray的处理机制
o ApplicationContext组件新增一组获取ProArray对象的接口
public ProArray getArrayProperty(String name) ;
public ProArray getProArrayProperty(String name, ProArray defaultValue) ;

o 新增convert标签，支持字典数据值向名称的转换
其中的datas为一个map属性映射值，name对应于key，convert标签通过name获取到对应的属性值
然后显示到页面上，如果对应的值没有那么输出defaultValue对应的值，如果没有设置defaultValue
那么直接输出name。
<pg:convert convertData="datas" colName="name" defaultValue=""/>
pager-taglib.tld
frameworkset.jar
------2011-04-18------------
o 解决获取空的ProList时导致aop框架启动失败的问题
o 完善事务泄露检测机制，在manager-provider.xml中增加检测页面地址类型配置：
<!-- 数据库事务泄露检测url类型范围配置 -->
	<property name="transaction.leakcheck.files" >
		<array componentType="String">
			<property value=".jsp"/>
			<property value=".do"/>
			<property value=".page"/>
			<property value=".action"/>
			<property value=".ajax"/>
		</array>
	</property>
------2011-04-16------------
o 完善带返回值的事务管理模板组件支持泛型类型的返回
public void stringarraytoList(final List<ListBean> beans) throws Throwable {
		List<ListBean> ret = TemplateDBUtil.executeTemplate(
				new JDBCValueTemplate<List<ListBean>>(){
					public List<ListBean>  execute() throws Exception {
						String sql = "INSERT INTO LISTBEAN (" + "ID," + "FIELDNAME," 
						+ "FIELDLABLE," + "FIELDTYPE," + "SORTORDER,"
						+ " ISPRIMARYKEY," + "REQUIRED," + "FIELDLENGTH,"
						+ "ISVALIDATED" + ")" + "VALUES"
						+ "(#[id],#[fieldName],#[fieldLable],#[fieldType],#[sortorder]"
						+ ",#[isprimaryKey],#[required],#[fieldLength],#[isvalidated])";
						SQLExecutor.delete("delete from LISTBEAN");
						SQLExecutor.insertBeans(sql, beans);
						return beans;
				}
			}
		);
	}
o 解决主页面通过ajax方式加载多个分页页面时，跳转功能不能正常使用的问题，以及提示信息中文乱码问题
	
------2011-04-14------------
o mvc中传递给分页标签的导航路径修改为带上下文的绝对地址，以免在使用jquery模式局部分页时，主页面的相对地址和分页对应的页面的相对路径不一致时，不能正确地进行分页导航
------2011-04-13------------
o 控制器方法中增加Map类型参数绑定机制，可以将request中的参数转换为Map对象，当参数是数组时存入数组值，否则存入单个值
------2011-04-11------------
o 完善ConfigSQLExecutor和SQLExecutor组件中所有和bean对象相关的接口，
	Object bean参数可以是普通的的值对象，也可以是一个SQLParams对象,也可以是一个Map对象
	使用方法参考测试用例：
	/bboss-persistent/test/com/frameworkset/sqlexecutor/ConfigSQLExecutorTest.java



	
------2011-04-11------------
o 新增array元素，通过该元素可以实现各种类型数组数据的注入功能
------2011-04-07------------
o  修改DaemonThread进程，支持从外部指定刷新文件资源的时间间隔。
o 完善ApplicationContext组件的生命周期管理机制
o ApplicationContext组件增加获取long值属性的api
------2011-04-11------------
o 新增array元素，通过该元素可以实现各种类型数组数据的注入功能
------2011-04-07------------
o 增加根据变量名称从配置文件中获取sql语句的来操作数据库组件,对应sql配置文件提供定时刷新机制
  如果检测到sql文件被修改，就从新加载文件（前提是开启刷新机制）
com.frameworkset.common.poolman.ConfigSQLExecutor
具体的使用方法为：
ConfigSQLExecutor executor = new ConfigSQLExecutor("com/frameworkset/sqlexecutor/sqlfile.xml");
Map dbBeans  =  executor.queryObject(HashMap.class, "sqltest");
String result = executor.queryFieldBean("sqltemplate", bean);
配置文件：

<?xml version="1.0" encoding='gb2312'?>
<properties>
<description>
<![CDATA[
	sql配置文件
	可以通过名称属性name配置默认sql，特定数据库的sql通过在
	名称后面加数据库类型后缀来区分，例如：
	sqltest
	sqltest-oracle
	sqltest-derby
	sqltest-mysql
	等等，本配置实例就演示了具体配置方法
 ]]>
</description>
	<property name="sqltest"><![CDATA[select * from LISTBEAN]]>
	</property>	
	<property name="sqltest-oracle"><![CDATA[select * from LISTBEAN]]>
	</property>
	<property name="sqltemplate"><![CDATA[select FIELDNAME from LISTBEAN where FIELDNAME=#[fieldName]]]>
	</property>
	<property name="sqltemplate-oracle"><![CDATA[select FIELDNAME from LISTBEAN where FIELDNAME=#[fieldName]  ]]>
	</property>	
	<property name="dynamicsqltemplate"><![CDATA[select *  from CIM_ETL_REPOSITORY  where 1=1 
					#if($HOST_ID && !$HOST_ID.equals("")) and HOST_ID = #[HOST_ID] #end  
						and PLUGIN_ID = #[PLUGIN_ID] and CATEGORY_ID = #[CATEGORY_ID] and APP = #[APP]]]>	
	</property>
</properties>

刷新机制的配置方法：
在manager-provider.xml文件中添加以下配置项即可：
<property name="sqlfile.refresh_interval" value="10000"/>
当value大于0时就开启sqlfile文件的更新检测机制，每隔value指定的时间间隔就检测一次，有更新就重新加载，否则不重新加载

o 完善ApplicationContext组件的生命周期管理机制
o ApplicationContext组件增加获取long值属性的api
o 完善mvc框架配置文件导入方式
可以用,号分隔导入子目录下的配置文件,例如：
<servlet>
	<servlet-name>mvcdispather</servlet-name>
	<servlet-class>org.frameworkset.web.servlet.DispatchServlet</servlet-class>
	<init-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/bboss-*.xml,
					/WEB-INF/conf/bboss-*.xml</param-value>
	</init-param>
。。。。。。
</servlet>

------2011-04-05------------
o 控制器方法增加枚举类型，枚举数组类型参数的绑定功能
------2011-03-31------------
o 跳转路径可以通过path：元素直接指定，而无需注入
具体使用方法，参考demo
WebRoot/WEB-INF/bboss-path.xml

------2011-04-06------------
o 增加一组查询单个字段的泛型接口，使用方法如下：
		String sql = "select REQUIRED from LISTBEAN ";
		int id=  SQLExecutor.queryTField(int.class, sql);
		long id=  SQLExecutor.queryTField(long.class, "select seq_name.nextval from LISTBEAN ");
		String sql = "select FIELDLABLE from LISTBEAN ";
		String id=  SQLExecutor.queryTField(String.class, sql);
		System.out.println(id);
o 3.0api增加返回List<HashMap>结果集的查询接口支持，使用方法如下（以预编译语句为例）：
@Test
	public void queryListMap() throws SQLException
	{
		String sql = "select * from LISTBEAN name=?";
		List<HashMap> dbBeans  =  SQLExecutor.queryListWithDBName(HashMap.class, "mysql", sql,"ttt");
		System.out.println(dbBeans);
	}
	
	
	public void queryListMapWithbeanCondition() throws SQLException
	{
		String sql = "select * from LISTBEAN name=#[name]";
		ListBean beanobject = new ListBean();
		beanobject.setName("duoduo");
		List<HashMap> dbBeans  =  SQLExecutor.queryListWithDBName(HashMap.class, "mysql", sql,beanobject);
		System.out.println(dbBeans);
	}
	
	@Test
	public void queryMap() throws SQLException
	{
		String sql = "select * from LISTBEAN ";
		Map dbBeans  =  SQLExecutor.queryObject(HashMap.class, sql);
		System.out.println(dbBeans);
	}
	
------2011-03-30------------
o 3.0api中完善对java.util.Date类型对象属性数据的处理

o 修复mvc实现分页功能时，通过handleMapping注解指定的url路径无法进行分页的bug，修改的程序如下：

------2011-03-20------------
o 改进右键菜单功能，提升右键菜单性能，涉及的功能有：使用右键菜单的树标签和使用右键菜单的列表、分页标签，以及所有其他相关的页面